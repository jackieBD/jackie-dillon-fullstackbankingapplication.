{"version":3,"sources":["index.js","../node_modules/express/lib sync","dal.js","../node_modules/mongodb/lib sync"],"names":["express","require","app","cors","dal","use","static","get","req","res","find","params","email","then","users","length","console","log","send","create","name","password","user","findOne","amount","Number","update","response","all","docs","listen","process","PORT","webpackEmptyContext","e","Error","code","keys","resolve","module","exports","id","MongoClient","db","connect","useUnifiedTopology","err","client","Promise","reject","collection","doc","balance","insertOne","w","result","toArray","catch","findOneAndUpdate","$inc","returnOriginal","documents"],"mappings":"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","file":"static/js/main.c51aa4f7.chunk.js","sourcesContent":["var express = require('express');\r\nvar app     = express();\r\nvar cors    = require('cors');\r\nvar dal     = require('./dal.js');\r\nconst e = require('express');\r\n\r\n// used to serve static files from public directory\r\napp.use(express.static('public'));\r\napp.use(cors());\r\n\r\n// create user account\r\napp.get('/account/create/:name/:email/:password', function (req, res) {\r\n\r\n    // check if account exists\r\n    dal.find(req.params.email).\r\n        then((users) => {\r\n\r\n            // if user exists, return error message\r\n            if(users.length > 0){\r\n                console.log('User already in exists');\r\n                res.send('User already in exists');    \r\n            }\r\n            else{\r\n                // else create user\r\n                dal.create(req.params.name,req.params.email,req.params.password).\r\n                    then((user) => {\r\n                        console.log(user);\r\n                        res.send(user);            \r\n                    });            \r\n            }\r\n\r\n        });\r\n});\r\n\r\n\r\n// login user \r\napp.get('/account/login/:email/:password', function (req, res) {\r\n\r\n    dal.find(req.params.email).\r\n        then((user) => {\r\n\r\n            // if user exists, check password\r\n            if(user.length > 0){\r\n                if (user[0].password === req.params.password){\r\n                    res.send(user[0]);\r\n                }\r\n                else{\r\n                    res.send('Login failed: wrong password');\r\n                }\r\n            }\r\n            else{\r\n                res.send('Login failed: user not found');\r\n            }\r\n    });\r\n    \r\n});\r\n\r\n// find user account\r\napp.get('/account/find/:email', function (req, res) {\r\n\r\n    dal.find(req.params.email).\r\n        then((user) => {\r\n            console.log(user);\r\n            res.send(user);\r\n    });\r\n});\r\n\r\n// find one user by email - alternative to find\r\napp.get('/account/findOne/:email', function (req, res) {\r\n\r\n    dal.findOne(req.params.email).\r\n        then((user) => {\r\n            console.log(user);\r\n            res.send(user);\r\n    });\r\n});\r\n\r\n\r\n// update - deposit/withdraw amount\r\napp.get('/account/update/:email/:amount', function (req, res) {\r\n\r\n    var amount = Number(req.params.amount);\r\n\r\n    dal.update(req.params.email, amount).\r\n        then((response) => {\r\n            console.log(response);\r\n            res.send(response);\r\n    });    \r\n});\r\n\r\n// all accounts\r\napp.get('/account/all', function (req, res) {\r\n\r\n    dal.all().\r\n        then((docs) => {\r\n            console.log(docs);\r\n            res.send(docs);\r\n    });\r\n});\r\n\r\n\r\n// var port = 3000;\r\napp.listen(process.env.PORT);\r\n// console.log('Running on port:' + port)","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 358;","const MongoClient = require('mongodb').MongoClient;\n                    \nconst uri         = 'mongodb+srv://jackie:4rYEQrnR6TZKqGcn@cluster0.7yxjloo.mongodb.net/?retryWrites=true&w=majority';\nlet db            = null;\n \n// // connect to mongo\nMongoClient.connect(uri, {useUnifiedTopology: true}, function(err, client) {\n    console.log(\"Connected successfully to db server\");\n\n    // connect to myproject database\n    db = client.db('myproject');\n});\n\n// // create user account\nfunction create(name, email, password){\n    return new Promise((resolve, reject) => {    \n        const collection = db.collection('users');\n        const doc = {name, email, password, balance: 0};\n        collection.insertOne(doc, {w:1}, function(err, result) {\n            err ? reject(err) : resolve(doc);\n        });    \n    })\n}\n\n// find user account\nfunction find(email){\n    return new Promise((resolve, reject) => {    \n        const customers = db\n            .collection('users')\n            .find({email: email})\n            .toArray(function(err, docs) {\n                err ? reject(err) : resolve(docs);\n        });    \n    })\n}\n\n// find user account\nfunction findOne(email){\n    return new Promise((resolve, reject) => {    \n        const customers = db\n            .collection('users')\n            .findOne({email: email})\n            .then((doc) => resolve(doc))\n            .catch((err) => reject(err));    \n    })\n}\n\n// update - deposit/withdraw amount\nfunction update(email, amount){\n    return new Promise((resolve, reject) => {    \n        const customers = db\n            .collection('users')            \n            .findOneAndUpdate(\n                {email: email},\n                { $inc: { balance: amount}},\n                { returnOriginal: false },\n                function (err, documents) {\n                    err ? reject(err) : resolve(documents);\n                }\n            );            \n\n\n    });    \n}\n\n// all users\nfunction all(){\n    return new Promise((resolve, reject) => {    \n        const customers = db\n            .collection('users')\n            .find({})\n            .toArray(function(err, docs) {\n                err ? reject(err) : resolve(docs);\n        });    \n    })\n}\n\n\nmodule.exports = {create, all,  findOne, find, update};\n\n//  ^^^ ","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 480;"],"sourceRoot":""}